from functools import wraps

def run_once(fn):
	@wraps(fn)
	def inner(*args):
		if inner.count < 1:
			inner.count += 1
			return fn(*args)
		else:
			return "You can't run this function more than once. You're done"
	inner.count = 0
	return inner

@run_once
def add(a,b):
	return a + b

@run_once
def subtract(a,b):
	return a - b

# test_once = run_once(add)		--		this line is the ~ manual wrapper
# print(add(1,3))
# print(add(1,3))
# print(add(1,3))
# print(add(1,3))
# print(subtract(1,3))
# print(subtract(1,3))

def find_needle(lst):
	if type(lst) is list:
		if 'needle' in lst:
			return "found the needle at {} position".format(lst.index('needle'))
	else:
		return "that's not a list. pass me a list to try again!"

# print(find_needle(['hay', 'junk', 'hay', 'hay', 'more_junk', 'needle', 'random_junk']))

def jaden_cased(str):
	return ' '.join([val[0].upper() + val[1::] for val in str.split(' ')])


# def jaden_cased(str):
# 	if "'" in str:
# 		str = str.title()
# 		return str.replace(str[str.index("'")+1], str[str.index("'")+1].lower())

# print(jaden_cased("how can mirrors Be real if our Eyes aren't real"))
# print(jaden_cased("If there Is Bread Winners, there Is Bread Losers. But You Can't toast What Isn't Real."))

def position(alphabet):
    return "Position of alphabet: {}".format(ord(alphabet.lower()) - 96)

def even_or_odd(number):
	# if number % == 0:
	# 	return 'Even'
	# return Odd
  return 'Odd' if number % 2 else 'Even'


def greet(name):
    # if name == "Johnny":
    #     return "Hello, my love!"
    # return "Hello, {name}!".format(name=name)
    return "Hello, my love!" if name == "Johnny" else "Hello, {name}!".format(name=name)

# def greet(name):
# 	return "Hello, {name}!".format(name = ('my love' if name == 'Johnny' else name));			WAY COOLER!

def positive_sum(arr):
	return sum(num for num in arr if num >= 0)    
    # solution = 0
    # for num in arr:
    #     if num >= 0:
    #         solution += num
    # return solution

 # positive_sum([1,3,-5,-7,10])

 # def num_rotated(word, word2):
 # 	count = 1
 # 	if word2 == word:
 # 		return 'They are the same words. Try giving me something different!'
 # 	while len(word) + 1 > count:
 # 		if word2 == word[1::] + word[0]:
 # 			return count
 # 		count += 1
 # 	return '{} is not a rotated word of {}'.format(word2, word)

 # num_rotated('moose', 'osemo')

# def mode(num_list):
# 	num_dict = {val: num_list.count(val) for val in num_list}

# 	top_val = num_dict[num_list[0]]
# 	for key in num_dict:
# 		if num_dict[key] > top_val:
# 			top_val = key
# 	return top_val


def mode(num_list):
	num_dict = {val: num_list.count(val) for val in num_list}
	max_val = max(num_dict.values())
	index = list(num_dict.values()).index(max_val)
	return list(num_dict.keys())[index]

# print(mode([2,4,1,2,3,3,4,4,5,4,4,6,4,6,7,4]))

# def is_palindrome(str):
# 	to_test = ''.join(str.split(' ')).lower()
# 	if to_test == to_test[::-1]:
# 		return True
# 	return False

def is_palindrome(str):
	to_test = ''.join(str.split(' ')).lower()
	return True if to_test == to_test[::-1] else False	

# print(is_palindrome('a man a plan a canal Panama'))


def multiple_letter_count(str):
	return {ltr: str.count(ltr) for ltr in str}
# print(multiple_letter_count('hello'))

def partition(lst, fn):
	# solution_list = []
	# solution_list[0] = [fn(item) for item in lst if fn(item) == True]
	# solution_list[1] = [fn(item) for item in lst if fn(item) == False]
	# return solution_list
	return [[fn(item) for item in lst if fn(item)], [fn(item) for item in lst if not fn(item)]]

def add(a,b):
    return a+b

def once(fn):
	def inner(*args):
		if inner.count < 1:
			inner.count += 1
			return fn(*args)
		return "Can't run function more than once!"
	inner.count = 0
	return inner

one_addition = once(add)

print(one_addition(1,2))
print(one_addition(1,2))
